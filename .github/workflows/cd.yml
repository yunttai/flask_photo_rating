# .github/workflows/cd.yml
name: CD – Build, Push & Deploy to GCE

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]

###############################################################################
# 1) Build & Push to Docker Hub
###############################################################################
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/myflask
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

###############################################################################
# 2) Deploy to GCE VM
###############################################################################
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      REMOTE_DIR: ${{ secrets.REMOTE_APP_DIR }}
      DOMAIN: ${{ secrets.DOMAIN }}
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      # ── 0. SSH 준비 ──────────────────────────────────────────────────────
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          if [ -n "${{ secrets.GCP_HOST_KEY }}" ]; then
            echo "${{ secrets.GCP_HOST_KEY }}" >> ~/.ssh/known_hosts
          fi

      - name: Test SSH
        run: ssh -o ConnectTimeout=10 ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "echo OK"

      # ── 1. 디렉터리 & .env ──────────────────────────────────────────────
      - name: Prepare remote directory & .env
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            REMOTE_DIR='${{ secrets.REMOTE_APP_DIR }}' \
            DOMAIN='${{ secrets.DOMAIN }}' \
            LETSENCRYPT_EMAIL='${{ secrets.LETSENCRYPT_EMAIL }}' \
            IMAGE_TAG='${{ github.sha }}' \
            DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}' \
            bash -s <<'EOF'
            set -euo pipefail
            : "${REMOTE_DIR:?}"; : "${DOMAIN:?}"; : "${LETSENCRYPT_EMAIL:?}"; : "${IMAGE_TAG:?}"; : "${DOCKERHUB_USERNAME:?}"

            mkdir -p "$REMOTE_DIR"/{nginx,certbot/{config,www,logs}}
            cat > "$REMOTE_DIR/.env" <<EOT
            DOMAIN=$DOMAIN
            LETSENCRYPT_EMAIL=$LETSENCRYPT_EMAIL
            IMAGE_TAG=$IMAGE_TAG
            DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME
            EOT
            EOF
        env:
          REMOTE_DIR: ${{ env.REMOTE_DIR }}
          DOMAIN: ${{ env.DOMAIN }}
          LETSENCRYPT_EMAIL: ${{ env.LETSENCRYPT_EMAIL }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      # ── 2. HTTP-only 템플릿 & Compose 업로드 ─────────────────────────────
      - name: Upload HTTP-only Nginx template and compose
        run: |
          scp -o StrictHostKeyChecking=no nginx/default.http.conf.template \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:"${{ env.REMOTE_DIR }}/nginx/default.conf.template"
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:"${{ env.REMOTE_DIR }}/"

      # ── 3. 스택 기동 (80) ───────────────────────────────────────────────
      - name: Start HTTP-only stack
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            cd '${{ env.REMOTE_DIR }}' &&
            docker compose -f docker-compose.prod.yml down --remove-orphans || true &&
            docker compose -f docker-compose.prod.yml up -d nginx web
          "

      # ── 4. HTTP 응답 대기 ───────────────────────────────────────────────
      - name: Wait for HTTP
        run: |
          for i in {1..24}; do
            if curl -sSf -m 5 http://${{ env.DOMAIN }} >/dev/null 2>&1; then
              echo "HTTP OK"; break
            fi
            echo "...waiting HTTP (${i}/24)"; sleep 5
          done

      # ── 5. 인증서 발급/갱신 ──────────────────────────────────────────────
      - name: Issue / Renew SSL
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            cd '${{ env.REMOTE_DIR }}' &&
            docker compose -f docker-compose.prod.yml run --rm certbot \
              certonly --webroot -w /var/www/certbot \
              --non-interactive --keep-until-expiring \
              --email '${{ env.LETSENCRYPT_EMAIL }}' -d '${{ env.DOMAIN }}' \
              --agree-tos --no-eff-email --rsa-key-size 4096
          "

      # ── 6. SSL helper 파일 확보(+디렉터리 보장) ──────────────────────────
      - name: Provide ssl helper files for nginx
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} <<'EOF'
            set -euo pipefail
            cd '${{ env.REMOTE_DIR }}'
            docker compose -f docker-compose.prod.yml run --rm --entrypoint "" certbot sh -euxc '
              OPTIONS=/etc/letsencrypt/options-ssl-nginx.conf
              DHPARAM=/etc/letsencrypt/ssl-dhparams.pem
              mkdir -p /etc/letsencrypt
              if [ ! -f "$OPTIONS" ]; then
                SRC=$(find /usr /opt -maxdepth 7 -type f -name options-ssl-nginx.conf 2>/dev/null | head -n1 || true)
                if [ -n "$SRC" ]; then
                  cp "$SRC" "$OPTIONS"
                elif command -v curl >/dev/null 2>&1; then
                  curl -fsSL https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf -o "$OPTIONS" || true
                fi
              fi
              if [ ! -s "$OPTIONS" ]; then
                printf "%s\n" \
                  "ssl_session_cache   shared:SSL:10m;" \
                  "ssl_session_timeout 1h;" \
                  "ssl_prefer_server_ciphers on;" \
                  "ssl_protocols TLSv1.2 TLSv1.3;" \
                  "ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;" \
                  > "$OPTIONS"
              fi
              if [ ! -f "$DHPARAM" ]; then
                openssl dhparam -out "$DHPARAM" 2048
              fi
            '
          EOF

      # ── 7. HTTPS 템플릿 업로드 ───────────────────────────────────────────
      - name: Upload HTTPS Nginx template
        run: |
          scp -o StrictHostKeyChecking=no nginx/default.https.conf.template \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:"${{ env.REMOTE_DIR }}/nginx/default.conf.template"

      # ── 8. conf 재생성 & nginx reload ───────────────────────────────────
      - name: Apply HTTPS config & reload nginx
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} <<'EOF'
            set -euo pipefail
            cd '${{ env.REMOTE_DIR }}'
            docker compose -f docker-compose.prod.yml exec nginx sh -c "
              envsubst '\$DOMAIN' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf &&
              nginx -s reload
            "
          EOF

      # ── 9. 최신 이미지 pull & 전체 스택 ─────────────────────────────────
      - name: Deploy latest stack
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            cd '${{ env.REMOTE_DIR }}' &&
            docker compose -f docker-compose.prod.yml pull &&
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
          "

      # ── 10. HTTPS 검증 ──────────────────────────────────────────────────
      - name: Verify HTTPS
        run: |
          for i in {1..12}; do
            if curl -sSf -m 5 https://${{ env.DOMAIN }} >/dev/null 2>&1; then
              echo "HTTPS OK"; break
            fi
            echo "...waiting HTTPS (${i}/12)"; sleep 10
          done

      # ── 11. 오래된 이미지 정리 ──────────────────────────────────────────
      - name: Prune images
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "docker image prune -f --filter 'until=24h' || true"

###############################################################################
# 3) 통합 알림 (콘솔)
###############################################################################
  notify:
    needs: [ build-and-push, deploy ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Success notice
        if: success()
        run: echo "Deployed to ${{ secrets.DOMAIN }}"
      - name: Failure notice
        if: failure()
        run: echo "Deployment to ${{ secrets.DOMAIN }} failed"
